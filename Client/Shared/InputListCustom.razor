<div>
    <h5>@Title</h5>
    <ul>
        @foreach (var element in Elements.Select((e, i) => new { Element = e, Index = i }))
        {
            <li>
                <input value="@element.Element" @oninput="@(e => OnElementInput(e, element.Index))" @ref="elementRef"
                       placeholder="new @(Label)" aria-label="@(Label)" />
                @if (element.Index != Elements.Count - 1)
                {
                    <button type="button" @onclick="@(() => RemoveElement(element.Index))" tabindex="-1">✕</button>
                }
            </li>
        }
    </ul>
</div>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public List<string> Elements { get; set; }

    [Parameter]
    public EditContext EditContext { get; set; }

    [Parameter]
    public string FieldName { get; set; }

    private List<ElementReference> elementsRefs = new List<ElementReference>();

    private ElementReference elementRef
    {
        set => elementsRefs.Add(value);
    }

    protected override void OnParametersSet()
    {
        Elements ??= new List<string>();
        if (!Elements.Any())
        {
            Elements.Add(string.Empty);
        }
    }

    private void OnElementInput(ChangeEventArgs e, in int index)
    {
        var newValue = e?.Value?.ToString();
        if (string.IsNullOrEmpty(newValue) && index != Elements.Count - 1)
        {
            RemoveElement(index);
            return;
        }
        Elements[index] = newValue;
        if (!string.IsNullOrEmpty(newValue) && index == Elements.Count - 1)
        {
            Elements.Add(string.Empty);
        }
        NotifyFieldChanged();
    }

    private void RemoveElement(in int index)
    {
        Elements.RemoveAt(index);
        elementsRefs[index].FocusAsync();
        NotifyFieldChanged();
    }

    private void NotifyFieldChanged()
    {
        var fieldIdentifier = new FieldIdentifier(EditContext.Model, FieldName);
        EditContext.NotifyFieldChanged(fieldIdentifier);
    }

}
