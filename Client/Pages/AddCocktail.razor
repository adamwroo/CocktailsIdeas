@page "/addcocktail"
@using CocktailsIdeas.Shared
@inject HttpClient httpClient

<h3>Add a cocktail</h3>

<EditForm EditContext="@editContext" OnValidSubmit="AddNewCocktail">
    <DataAnnotationsValidator />
    <InputText @bind-Value="cocktail.Name" placeholder="Cocktail's name" aria-label="Cocktail's name" />
    <ValidationMessage For="@(() => cocktail.Name)" />
    <InputListCustom
        Title="Ingredients"
        Label="ingredient"
        Elements="cocktail.Ingredients"
        EditContext="editContext"
        FieldName="@nameof(cocktail.Ingredients)"
        />
    <ValidationMessage For="@(() => cocktail.Ingredients)" />
    <InputListCustom
        Title="Steps"
        Label="step"
        Elements="cocktail.Steps"
        EditContext="editContext"
        FieldName="@nameof(cocktail.Steps)"
    />
    <ValidationMessage For="@(() => cocktail.Steps)" />

    <div>
        <button type="submit" disabled="@isSubmitting">Add cocktail</button>
    </div>
</EditForm>

@code {
    private Cocktail cocktail = new Cocktail();
    private bool isSubmitting = false;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        // add placeholders for a new ingredient and step
        cocktail.Ingredients.Add(string.Empty);
        cocktail.Steps.Add(string.Empty);

        editContext = new EditContext(cocktail);
    }

    private async Task AddNewCocktail()
    {
        isSubmitting = true;

        // remove the last ingredient and step (they're only placeholders)
        cocktail.Ingredients.RemoveAt(cocktail.Ingredients.Count - 1);
        cocktail.Steps.RemoveAt(cocktail.Steps.Count - 1);

        var response = await httpClient.PostAsJsonAsync("cocktails", cocktail);
        if (response.IsSuccessStatusCode)
        {
            cocktail = new Cocktail();
            cocktail.Ingredients.Add(string.Empty);
            cocktail.Steps.Add(string.Empty);
        }

        isSubmitting = false;
    }

}
