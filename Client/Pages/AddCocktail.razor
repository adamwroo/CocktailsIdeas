@page "/addcocktail"
@using CocktailsIdeas.Shared
@inject HttpClient httpClient

<h3>Add a cocktail</h3>

<EditForm Model="cocktail" OnValidSubmit="AddNewCocktail">
    <DataAnnotationsValidator />
    <InputText @bind-Value="cocktail.Name" placeholder="Cocktail's name" aria-label="Cocktail's name" />
    <ValidationMessage For="@(() => cocktail.Name)" />
    <div>
        <h5>Ingredients</h5>
        <ValidationMessage For="@(() => cocktail.Ingredients)" />
        <ul>
            @foreach (var ingredient in cocktail.Ingredients.Select((e, i) => new { Ingredient = e, Index = i }))
            {
                <li>
                    <input value="@ingredient.Ingredient" @oninput="@(e => OnIngredientChanged(e, ingredient.Index))"
                           placeholder="new ingredient" aria-label="ingredient" />
                </li>
            }
        </ul>
    </div>
    <div>
        <h5>Steps</h5>
        <ValidationMessage For="@(() => cocktail.Steps)" />
        <ul>
            @foreach (var ingredient in cocktail.Steps.Select((e, i) => new { Step = e, Index = i }))
            {
                <li>
                    <input value="@ingredient.Step" @oninput="@(e => OnStepChanged(e, ingredient.Index))"
                           placeholder="new step" aria-label="step" />
                </li>
            }
        </ul>
    </div>

    <div>
        <button type="submit" disabled="@isSubmitting">Add cocktail</button>
    </div>
</EditForm>

@code {
    private Cocktail cocktail = new Cocktail();
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        // add placeholders for a new ingredient and step
        cocktail.Ingredients.Add(string.Empty);
        cocktail.Steps.Add(string.Empty);
    }

    private void OnIngredientChanged(ChangeEventArgs e, in int index)
    {
        var changedIngredient = e?.Value?.ToString();

        if (string.IsNullOrEmpty(changedIngredient) && cocktail.Ingredients.Count > 1)
        {
            // if it's now empty and it's not the only one, remove it
            cocktail.Ingredients.RemoveAt(index);
            return;
        }

        if (index == cocktail.Ingredients.Count - 1)
        {
            // if the last one has been updated, add an empty one at the end of the list
            cocktail.Ingredients.Add(string.Empty);
            // todo: validation should be updated
        }

        cocktail.Ingredients[index] = changedIngredient;
    }

    private void OnStepChanged(ChangeEventArgs e, in int index)
    {
        var changedStep = e?.Value?.ToString();

        if (string.IsNullOrEmpty(changedStep) && cocktail.Steps.Count > 1)
        {
            // if it's now empty and it's not the only one, remove it
            cocktail.Steps.RemoveAt(index);
            return;
        }

        if (index == cocktail.Steps.Count - 1)
        {
            // if the last one has been updated, add an empty one at the end of the list
            cocktail.Steps.Add(string.Empty);
            // todo: validation should be updated
        }

        cocktail.Steps[index] = changedStep;
    }

    /*private bool IsCocktailValid()
    {
        return !string.IsNullOrWhiteSpace(cocktail.Name) && cocktail.Ingredients.Any() && cocktail.Steps.Any();
    }*/

    private async Task AddNewCocktail()
    {
        // todo: validation, see: https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-5.0 (ModelState.AddModelError)

        isSubmitting = true;

        // remove the last ingredient and step (they're only placeholders)
        cocktail.Ingredients.RemoveAt(cocktail.Ingredients.Count - 1);
        cocktail.Steps.RemoveAt(cocktail.Steps.Count - 1);

        var response = await httpClient.PostAsJsonAsync("cocktails", cocktail);
        if (response.IsSuccessStatusCode)
        {
            cocktail = new Cocktail();
            cocktail.Ingredients.Add(string.Empty);
            cocktail.Steps.Add(string.Empty);
        }

        isSubmitting = false;
    }

}
