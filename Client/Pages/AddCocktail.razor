@page "/addcocktail"
@using CocktailsIdeas.Shared
@inject HttpClient httpClient

<div>
    <h3>Add a cocktail</h3>

    <EditForm EditContext="@editContext" OnValidSubmit="AddNewCocktail">
        <DataAnnotationsValidator />
        <div>
            <div class="container-with-validation-message">
                <h5>Name</h5>
                <ValidationMessage For="@(() => cocktail.Name)" />
            </div>
        </div>
        <FocusableInputText @ref="cocktailNameRef" @bind-Value="cocktail.Name" class="cocktail-name" placeholder="cocktail's name" aria-label="cocktail's name"/>
        <InputListCustom
            Title="Ingredients"
            Label="ingredient"
            Elements="cocktail.Ingredients"
            EditContext="editContext"
            FieldName="@nameof(cocktail.Ingredients)"
            ValidationMessageFor="@(() => cocktail.Ingredients)"
        />
        <InputListCustom
            Title="Steps"
            Label="step"
            Elements="cocktail.Steps"
            EditContext="editContext"
            FieldName="@nameof(cocktail.Steps)"
            ValidationMessageFor="@(() => cocktail.Steps)"
        />
        <div>
            <div class="container-with-validation-message">
                <h5>Source</h5>
                <ValidationMessage For="@(() => cocktail.Source)" />
            </div>
            <InputText
                ValueChanged="@( (string s) => MyValueChangeHandler(s) )" 
                Value="@cocktail.Source"
                ValueExpression="@( () => cocktail.Source )"
                placeholder="cocktail's source" aria-label="cocktail's source"/>
        </div>

        <div>
            <button type="submit" disabled="@isSubmitting">Add cocktail</button>
        </div>
    </EditForm>
</div>

@code {
    private Cocktail cocktail = new Cocktail();
    private bool isSubmitting = false;
    private EditContext editContext;
    private FocusableInputText cocktailNameRef;

    protected override void OnInitialized()
    {
        editContext = new EditContext(cocktail);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await cocktailNameRef.FocusAsync();
        }
    }

    private void MyValueChangeHandler(string theUserInput)
    {
        // workaround so 'Source' is not validated after it has been modified and its value cleared
        cocktail.Source = string.IsNullOrWhiteSpace(theUserInput) ? null : theUserInput;
    }

    private async Task AddNewCocktail()
    {
        isSubmitting = true;

        var response = await httpClient.PostAsJsonAsync("cocktails", cocktail);
        if (response.IsSuccessStatusCode)
        {
            cocktail = new Cocktail();
        }

        isSubmitting = false;
    }

}
